{"version":3,"file":"read-biguint-64-be.js","sourceRoot":"","sources":["../src/read-biguint-64-be.ts"],"names":[],"mappings":";;;AAAA,qCAA2C;AAE3C,+EAA+E;AAC/E,SAAgB,eAAe,CAAC,MAAc,EAAE,MAAM,GAAG,CAAC;IACtD,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,wBAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAExD,MAAM,EAAE,GACJ,KAAK,GAAG,CAAC,IAAI,EAAE;QACf,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE;QAC1B,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;QACzB,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;IAErB,MAAM,EAAE,GACJ,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE;QAC1B,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE;QAC1B,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC;IAET,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;AACnD,CAAC;AAhBD,0CAgBC","sourcesContent":["import { getFirstAndLast } from \"./common\";\n\n// https://github.com/nodejs/node/blob/v13.9.0/lib/internal/buffer.js#L103-L121\nexport function readBigUInt64BE(buffer: Buffer, offset = 0): bigint {\n    const { first, last } = getFirstAndLast(buffer, offset);\n\n    const hi =\n        first * 2 ** 24 +\n        buffer[++offset] * 2 ** 16 +\n        buffer[++offset] * 2 ** 8 +\n        buffer[++offset];\n\n    const lo =\n        buffer[++offset] * 2 ** 24 +\n        buffer[++offset] * 2 ** 16 +\n        buffer[++offset] * 2 ** 8 +\n        last;\n\n    return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n}\n"]}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFirstAndLast = void 0;
function errInvalidArgTypeMsg(name, expected, actual) {
    return `The "${name}" argument must be of type ${expected}. Recieved type ${actual}`;
}
function errOutOfRangeMsg(expected, received) {
    return `The value of "offset" is out of range. It must be ${expected}. Received ${received}`;
}
function boundsErrorMsg(value, length) {
    if (Math.floor(value) !== value) {
        return errOutOfRangeMsg("an integer", value);
    }
    if (length < 0)
        return "Attempt to access memory outside buffer bounds";
    return errOutOfRangeMsg(`>= 0 and <=${length}`, value);
}
function getFirstAndLast(buffer, offset) {
    if (!Buffer.isBuffer(buffer)) {
        throw new Error(errInvalidArgTypeMsg("buffer", "Buffer", typeof buffer));
    }
    if (typeof offset !== "number") {
        throw new Error(errInvalidArgTypeMsg("offset", "number", typeof offset));
    }
    const first = buffer[offset];
    const last = buffer[offset + 7];
    if (first === undefined || last === undefined) {
        throw new Error(boundsErrorMsg(offset, buffer.length - 8));
    }
    return { first, last };
}
exports.getFirstAndLast = getFirstAndLast;
//# sourceMappingURL=common.js.map
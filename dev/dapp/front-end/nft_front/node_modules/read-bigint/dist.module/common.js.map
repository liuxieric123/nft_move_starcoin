{"version":3,"file":"common.js","sourceRoot":"","sources":["../src/common.ts"],"names":[],"mappings":"AAAA,SAAS,oBAAoB,CACzB,IAAY,EACZ,QAAgB,EAChB,MAAc;IAEd,OAAO,QAAQ,IAAI,8BAA8B,QAAQ,mBAAmB,MAAM,EAAE,CAAC;AACzF,CAAC;AAED,SAAS,gBAAgB,CAAC,QAAgB,EAAE,QAAyB;IACjE,OAAO,qDAAqD,QAAQ,cAAc,QAAQ,EAAE,CAAC;AACjG,CAAC;AAED,SAAS,cAAc,CAAC,KAAa,EAAE,MAAc;IACjD,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;QAC7B,OAAO,gBAAgB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;KAChD;IAED,IAAI,MAAM,GAAG,CAAC;QAAE,OAAO,gDAAgD,CAAC;IAExE,OAAO,gBAAgB,CAAC,cAAc,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC;AAC3D,CAAC;AAED,MAAM,UAAU,eAAe,CAC3B,MAAc,EACd,MAAc;IAEd,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC1B,MAAM,IAAI,KAAK,CACX,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,MAAM,CAAC,CAC1D,CAAC;KACL;IAED,IAAI,OAAQ,MAAkB,KAAK,QAAQ,EAAE;QACzC,MAAM,IAAI,KAAK,CACX,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,MAAM,CAAC,CAC1D,CAAC;KACL;IAED,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAuB,CAAC;IACnD,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAuB,CAAC;IACtD,IAAI,KAAK,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;QAC3C,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KAC9D;IAED,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC","sourcesContent":["function errInvalidArgTypeMsg(\n    name: string,\n    expected: string,\n    actual: string,\n): string {\n    return `The \"${name}\" argument must be of type ${expected}. Recieved type ${actual}`;\n}\n\nfunction errOutOfRangeMsg(expected: string, received: string | number): string {\n    return `The value of \"offset\" is out of range. It must be ${expected}. Received ${received}`;\n}\n\nfunction boundsErrorMsg(value: number, length: number): string {\n    if (Math.floor(value) !== value) {\n        return errOutOfRangeMsg(\"an integer\", value);\n    }\n\n    if (length < 0) return \"Attempt to access memory outside buffer bounds\";\n\n    return errOutOfRangeMsg(`>= 0 and <=${length}`, value);\n}\n\nexport function getFirstAndLast(\n    buffer: Buffer,\n    offset: number,\n): { first: number; last: number } {\n    if (!Buffer.isBuffer(buffer)) {\n        throw new Error(\n            errInvalidArgTypeMsg(\"buffer\", \"Buffer\", typeof buffer),\n        );\n    }\n\n    if (typeof (offset as unknown) !== \"number\") {\n        throw new Error(\n            errInvalidArgTypeMsg(\"offset\", \"number\", typeof offset),\n        );\n    }\n\n    const first = buffer[offset] as number | undefined;\n    const last = buffer[offset + 7] as number | undefined;\n    if (first === undefined || last === undefined) {\n        throw new Error(boundsErrorMsg(offset, buffer.length - 8));\n    }\n\n    return { first, last };\n}\n"]}
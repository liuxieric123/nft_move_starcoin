{"version":3,"file":"read-bigint-64-le.js","sourceRoot":"","sources":["../src/read-bigint-64-le.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAE3C,+EAA+E;AAC/E,MAAM,UAAU,cAAc,CAAC,MAAc,EAAE,MAAM,GAAG,CAAC;IACrD,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAExD,MAAM,GAAG,GACL,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAClB,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;QAC3B,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE;QAC5B,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,WAAW;IAC7B,OAAO,CACH,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,CACF,KAAK;YACD,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;YACzB,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE;YAC1B,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CACjC,CACJ,CAAC;AACN,CAAC","sourcesContent":["import { getFirstAndLast } from \"./common\";\n\n// https://github.com/nodejs/node/blob/v13.9.0/lib/internal/buffer.js#L123-L139\nexport function readBigInt64LE(buffer: Buffer, offset = 0): bigint {\n    const { first, last } = getFirstAndLast(buffer, offset);\n\n    const val =\n        buffer[offset + 4] +\n        buffer[offset + 5] * 2 ** 8 +\n        buffer[offset + 6] * 2 ** 16 +\n        (last << 24); // Overflow\n    return (\n        (BigInt(val) << BigInt(32)) +\n        BigInt(\n            first +\n                buffer[++offset] * 2 ** 8 +\n                buffer[++offset] * 2 ** 16 +\n                buffer[++offset] * 2 ** 24,\n        )\n    );\n}\n"]}